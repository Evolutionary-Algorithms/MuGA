//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
//::     Antonio Manso                        Luis Correia                   ::
//::     manso@ipt.pt                   Luis.Correia@ciencias.ulisboa.pt     ::
//::                                                                         ::
//::     Biosystems & Integrative Sciences Institute                         ::
//::     Faculty of Sciences University of Lisboa                            ::
//::                                                                         ::
//::     Instituto Polit√©cnico de Tomar                                      ::
//::     Escola Superior de Tecnologia de Tomar                              ::
//::                                                                         ::
//::     This software was build with the purpose of investigate and         ::
//::     learning.                                                           ::
//::                                                             (c) 2019    ::
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//////////////////////////////////////////////////////////////////////////////
package GUI;

import GUI.DisplayProblem.DisplayPopulation;
import GUI.utils.MuGASystem;
import com.evolutionary.population.Population;
import com.evolutionary.population.SimplePopulation;
import com.evolutionary.problem.Individual;
import com.evolutionary.problem.real.multimodal.MultiModalFunc;
import com.evolutionary.solver.EAsolver;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author zulu
 */
public class UIpopulation extends javax.swing.JPanel {

    public Population myPopulation;
    EAsolver solver;

    DefaultListModel graphicsDisplay;

    /**
     * Creates new form UIpopulation
     */
    public UIpopulation() {
        initComponents();
    }

    public void setSolver(EAsolver solver) {
        this.solver = solver;
        setPopulation(solver.parents);
    }

    public void setPopulation(Population pop) {
        if (pop == null || pop.isEmpty()) {
            return;
        }
        myPopulation = pop;
        Individual ind = pop.getTemplate();
        ArrayList display = MuGASystem.getObjects(MuGASystem.GRAPHICS);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (Object object : display) {
            try {// try build display
                if (((DisplayPopulation) object).isValid(ind)) {
                    model.addElement(object);
                }
            } catch (Exception e) {
                //display not avaiable
            }
        }
        graphicsDisplay = DisplayPopulation.getGraphicsModel(myPopulation);
        lstGraphicsDisplay.setModel(graphicsDisplay);
        lstGraphicsDisplay.setSelectedIndex(0);
        tpDisplayPopStateChanged(null);
    }

    public DisplayPopulation getPopulationGraphics() {
        return (DisplayPopulation) lstGraphicsDisplay.getSelectedValues()[0];
    }

    public synchronized void updateSolverPopulation(EAsolver solver) {
        if (rbPeeks.isSelected()) {
            myPopulation = new SimplePopulation();
            if (solver.parents.getIndividual(0) instanceof MultiModalFunc) {
                MultiModalFunc problem = (MultiModalFunc) solver.parents.getIndividual(0);
                myPopulation = new SimplePopulation(problem.getPeeks(solver.parents.getGenomes()));
            }
        } else if (rbOptimums.isSelected()) {
            myPopulation = new SimplePopulation();
            List<Individual> pop = solver.parents.getGenomes();
            for (Individual ind : pop) {
                if (ind.isOptimum()) {
                    myPopulation.addIndividual(ind);
                }
            }
        } else if (rbHallOfFame.isSelected()) {
            myPopulation = new SimplePopulation(solver.hallOfFame);
        } else if (rbSelectedPopulation.isSelected()) {
            myPopulation = solver.selected;
        } else {
            myPopulation = solver.parents;
        }
        tpDisplayPopStateChanged(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        populationTypeGroup = new javax.swing.ButtonGroup();
        tpDisplayPop = new javax.swing.JTabbedPane();
        spGenotype = new javax.swing.JScrollPane();
        txtPopulation = new javax.swing.JTextArea();
        spPhenotype = new javax.swing.JScrollPane();
        txtPhenotype = new javax.swing.JTextArea();
        spGraphics = new javax.swing.JPanel();
        lstGraphicsDisplay = new javax.swing.JList<>();
        pnPaintPopulation = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        rbMainPopulation = new javax.swing.JRadioButton();
        rbSelectedPopulation = new javax.swing.JRadioButton();
        rbHallOfFame = new javax.swing.JRadioButton();
        rbOptimums = new javax.swing.JRadioButton();
        rbPeeks = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtProblemInfo = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        tpDisplayPop.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tpDisplayPop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tpDisplayPopStateChanged(evt);
            }
        });

        txtPopulation.setEditable(false);
        txtPopulation.setColumns(20);
        txtPopulation.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        txtPopulation.setRows(5);
        spGenotype.setViewportView(txtPopulation);

        tpDisplayPop.addTab("Genotype", spGenotype);

        txtPhenotype.setColumns(20);
        txtPhenotype.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        txtPhenotype.setRows(5);
        spPhenotype.setViewportView(txtPhenotype);

        tpDisplayPop.addTab("Phenotype", spPhenotype);

        spGraphics.setLayout(new java.awt.BorderLayout());

        lstGraphicsDisplay.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        lstGraphicsDisplay.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstGraphicsDisplay.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstGraphicsDisplay.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        lstGraphicsDisplay.setVisibleRowCount(1);
        lstGraphicsDisplay.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstGraphicsDisplayValueChanged(evt);
            }
        });
        spGraphics.add(lstGraphicsDisplay, java.awt.BorderLayout.PAGE_START);

        pnPaintPopulation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnPaintPopulationMouseClicked(evt);
            }
        });
        pnPaintPopulation.setLayout(new java.awt.BorderLayout());
        spGraphics.add(pnPaintPopulation, java.awt.BorderLayout.CENTER);

        tpDisplayPop.addTab("Graphics", spGraphics);

        jPanel1.setLayout(new java.awt.BorderLayout());

        populationTypeGroup.add(rbMainPopulation);
        rbMainPopulation.setSelected(true);
        rbMainPopulation.setText("Main Population");
        rbMainPopulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMainPopulationActionPerformed(evt);
            }
        });
        jPanel2.add(rbMainPopulation);

        populationTypeGroup.add(rbSelectedPopulation);
        rbSelectedPopulation.setText("Selected  Population");
        rbSelectedPopulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSelectedPopulationActionPerformed(evt);
            }
        });
        jPanel2.add(rbSelectedPopulation);

        populationTypeGroup.add(rbHallOfFame);
        rbHallOfFame.setText("Hall of Fame");
        rbHallOfFame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHallOfFameActionPerformed(evt);
            }
        });
        jPanel2.add(rbHallOfFame);

        populationTypeGroup.add(rbOptimums);
        rbOptimums.setText("Optimums");
        rbOptimums.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOptimumsActionPerformed(evt);
            }
        });
        jPanel2.add(rbOptimums);

        populationTypeGroup.add(rbPeeks);
        rbPeeks.setText("Peeks");
        rbPeeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPeeksActionPerformed(evt);
            }
        });
        jPanel2.add(rbPeeks);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        txtProblemInfo.setColumns(20);
        txtProblemInfo.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        txtProblemInfo.setRows(5);
        jScrollPane3.setViewportView(txtProblemInfo);

        jPanel1.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        tpDisplayPop.addTab("Setup", jPanel1);

        add(tpDisplayPop, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tpDisplayPopStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tpDisplayPopStateChanged
        if (myPopulation == null) {
            return;
        }
        if (tpDisplayPop.getSelectedComponent() == spGenotype) {
            txtPopulation.setText(getPopGenotypeString(myPopulation));
            txtPopulation.setCaretPosition(0);
        } else if (tpDisplayPop.getSelectedComponent() == spPhenotype) {
            txtPhenotype.setText(getPopPhenotypeString(myPopulation));
            txtPhenotype.setCaretPosition(0);
        } else if (tpDisplayPop.getSelectedComponent() == spGraphics) {
            lstGraphicsDisplayValueChanged(null);
        } else {
            txtProblemInfo.setText(solver.parents.getTemplate().getInformation());
            txtProblemInfo.setCaretPosition(0);
        }
    }//GEN-LAST:event_tpDisplayPopStateChanged

    private void lstGraphicsDisplayValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstGraphicsDisplayValueChanged
        if (lstGraphicsDisplay.getSelectedIndex() < 0 || solver == null || tpDisplayPop.getSelectedComponent() != spGraphics) {
            return;
        }
        //try to display 
        SwingUtilities.invokeLater(() -> {
            DisplayPopulation display = (DisplayPopulation) graphicsDisplay.get(lstGraphicsDisplay.getSelectedIndex());
            display.setSolver(solver, myPopulation);
            pnPaintPopulation.removeAll();
            pnPaintPopulation.add(display, BorderLayout.CENTER);
            //grPopulation.add(lstGraphicsDisplay, BorderLayout.NORTH);
            pnPaintPopulation.revalidate();
            pnPaintPopulation.repaint();
        });


    }//GEN-LAST:event_lstGraphicsDisplayValueChanged

    private void pnPaintPopulationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnPaintPopulationMouseClicked
        lstGraphicsDisplayValueChanged(null);
    }//GEN-LAST:event_pnPaintPopulationMouseClicked

    private void rbMainPopulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMainPopulationActionPerformed
        updateSolverPopulation(solver);
    }//GEN-LAST:event_rbMainPopulationActionPerformed

    private void rbSelectedPopulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSelectedPopulationActionPerformed
        updateSolverPopulation(solver);
    }//GEN-LAST:event_rbSelectedPopulationActionPerformed

    private void rbHallOfFameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHallOfFameActionPerformed
        updateSolverPopulation(solver);
    }//GEN-LAST:event_rbHallOfFameActionPerformed

    private void rbOptimumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOptimumsActionPerformed
        updateSolverPopulation(solver);
    }//GEN-LAST:event_rbOptimumsActionPerformed

    private void rbPeeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPeeksActionPerformed
        updateSolverPopulation(solver);
    }//GEN-LAST:event_rbPeeksActionPerformed

    public String getPopPhenotypeString(Population pop) {
//        if (solver instanceof Islands) {
//            Islands riga = (Islands) solver;
//            StringBuilder txt = new StringBuilder();
//            for (int i = 0; i < riga.island.size(); i++) {
//                txt.append("Island[ " + i + " ]\n");
//                txt.append(toPhenotypeString(riga.island.get(i).parents));
//
//            }
//            return txt.toString();
//        }
        return toPhenotypeString(pop);
    }

    public static String toPhenotypeString(Population pop) {
        if (pop.isEmpty()) {
            return "Empty Population";
        }

        List<Individual> lst = pop.getGenomes();
        Collections.sort(lst, pop.getTemplate());
        Collections.reverse(lst);

        StringBuilder txt = new StringBuilder(pop.getClass().getSimpleName() + " ");
        txt.append(" [ " + pop.getPopulationSize() + " - " + pop.getNumberOfIndividuals() + " ]");
        txt.append(lst.get(0).getProblemDefinition() + "\n");
        for (int i = 0; i < lst.size(); i++) {
            txt.append(lst.get(i).toStringPhenotypeIndividual() + "\n");
        }
        return txt.toString();
    }

    public String getPopGenotypeString(Population pop) {
//        if (solver instanceof Islands) {
//            Islands riga = (Islands) solver;
//            StringBuilder txt = new StringBuilder();
//            for (int i = 0; i < riga.island.size(); i++) {
//                txt.append("Island[ " + i + " ]\n");
//                txt.append(toPopGenotypeString(riga.island.get(i).parents));
//
//            }
//            return txt.toString();
//        }
        return toPopGenotypeString(pop);
    }

    public static String toPopGenotypeString(Population pop) {
        if (pop.isEmpty()) {
            return "Empty Population";
        }
        List<Individual> lst = pop.getGenomes();
        Collections.sort(lst);
        Collections.reverse(lst);

        StringBuilder txt = new StringBuilder(pop.getClass().getSimpleName() + " ");
        txt.append(" [ " + pop.getPopulationSize() + " - " + pop.getNumberOfIndividuals() + " ] ");
        txt.append(lst.get(0).getProblemDefinition() + "\n");
        for (int i = 0; i < lst.size(); i++) {
            txt.append(lst.get(i).toStringIndividual() + "\n");
        }
        return txt.toString();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> lstGraphicsDisplay;
    private javax.swing.JPanel pnPaintPopulation;
    private javax.swing.ButtonGroup populationTypeGroup;
    private javax.swing.JRadioButton rbHallOfFame;
    private javax.swing.JRadioButton rbMainPopulation;
    private javax.swing.JRadioButton rbOptimums;
    private javax.swing.JRadioButton rbPeeks;
    private javax.swing.JRadioButton rbSelectedPopulation;
    private javax.swing.JScrollPane spGenotype;
    private javax.swing.JPanel spGraphics;
    private javax.swing.JScrollPane spPhenotype;
    private javax.swing.JTabbedPane tpDisplayPop;
    private javax.swing.JTextArea txtPhenotype;
    private javax.swing.JTextArea txtPopulation;
    private javax.swing.JTextArea txtProblemInfo;
    // End of variables declaration//GEN-END:variables
}
